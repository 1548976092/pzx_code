# standard pinout config file for 3-axis steppers
# using a parport for I/O
#
# first load the parport driver
loadrt hal_gpio_h3_nanopi_m1 output_pins=3,5,7,8,11,12,15,16,32 input_pins=18,37
#loadrt hal_skeleton_pwm

loadrt not count=1
#
# next connect the parport functions to threads
# read inputs first
addf hal_gpio_h3_nanopi_m1.write base-thread 1
# write outputs last
addf hal_gpio_h3_nanopi_m1.read  base-thread -1
#addf  skeleton.0.write base-thread 1

addf not.0 base-thread 1
#
# finally connect physical pins to the signals
net Xstep =>  hal_gpio_h3_nanopi_m1.pin-03-out
net Xdir  =>  hal_gpio_h3_nanopi_m1.pin-05-out

net Ystep =>  hal_gpio_h3_nanopi_m1.pin-07-out
net Ydir  =>  hal_gpio_h3_nanopi_m1.pin-08-out

#net Ydir => not.0.in 
#net Ystep =>  hal_gpio_h3_nanopi_m1.pin-11-out
#net Ydir2 not.0.out  =>  hal_gpio_h3_nanopi_m1.pin-12-out

net Zstep =>  hal_gpio_h3_nanopi_m1.pin-15-out
net Zdir  =>  hal_gpio_h3_nanopi_m1.pin-16-out 




# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
#sets hal_gpio_h3_nanopi_m1.pin-18-in  estop-loop 

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect "spindle on" motion controller pin to a physical pin
net spindle-on spindle.0.on =>  hal_gpio_h3_nanopi_m1.pin-32-out

###
### You might use something like this to enable chopper drives when machine ON
### the Xen signal is defined in core_stepper.hal
###

# net Xen => parport.0.pin-01-out

###
### If you want active low for this pin, invert it like this:
###

# setp parport.0.pin-01-out-invert 1

###
### A sample home switch on the X axis (axis 0).  make a signal,
### link the incoming parport pin to the signal, then link the signal
### to EMC's axis 0 home switch input pin
###

# net Xhome parport.0.pin-10-in => joint.0.home-sw-in


#net  Xhome hal_gpio_h3_nanopi_m1.pin-18-in =>  joint.0.home-sw-in
#net   Xhome hal_gpio_h3_nanopi_m1.pin-18-in => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in joint.0.home-sw-in
#net  Yhome hal_gpio_h3_nanopi_m1.pin-18-in  => joint.1.home-sw-in
#setp  joint.1.homed  hal_gpio_h3_nanopi_m1.pin-18-in
net  home1 <= hal_gpio_h3_nanopi_m1.pin-18-in joint.0.neg-lim-sw-in
net  home2 <= hal_gpio_h3_nanopi_m1.pin-37-in joint.1.neg-lim-sw-in


net  home1 => joint.0.home-sw-in 
net  home2 => joint.1.home-sw-in 
#net  home3 => joint.2.home-sw-in


#共享会出错
#net  home => joint.0.pos-lim-sw-in
#net  home => joint.1.pos-lim-sw-in
#net  home => joint.2.pos-lim-sw-in

###
### Shared home switches all on one parallel port pin?
### that's ok, hook the same signal to all the axes, but be sure to 
### set HOME_IS_SHARED and HOME_SEQUENCE in the ini file.  See the
### user manual!
###

# net homeswitches <= parport.0.pin-10-in
# net homeswitches => joint.0.home-sw-in
# net homeswitches => joint.1.home-sw-in
# net homeswitches => joint.2.home-sw-in



###
### Sample separate limit switches on the X axis (axis 0)
###

# net X-neg-limit parport.0.pin-11-in => joint.0.neg-lim-sw-in
# net X-pos-limit parport.0.pin-12-in => joint.0.pos-lim-sw-in

#net X-neg-limit hal_gpio_h3_nanopi_m1.pin-18-in => joint.0.pos-lim-sw-in

###
### Just like the shared home switches example, you can wire together
### limit switches.  Beware if you hit one, EMC will stop but can't tell
### you which switch/axis has faulted.  Use caution when recovering from this.
###

# net Xlimits parport.0.pin-13-in => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in

