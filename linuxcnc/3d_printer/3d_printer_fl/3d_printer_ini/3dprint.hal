# standard pinout config file for 3-axis steppers
# using a parport for I/O
#
# first load the parport driver
#loadrt hal_parport cfg="0x0378"
#loadrt hal_gpio dir=0xc80000   

loadrt hal_gpio dir=0x337FFFF exclude=0xA3E1

loadrt not count=3	


#
# next connect the parport functions to threads
# read inputs first
#addf parport.0.read base-thread 1

addf hal_gpio.read base-thread 1

# write outputs last
#addf parport.0.write base-thread -1

addf hal_gpio.write base-thread -1

addf not.0 base-thread
addf not.1 base-thread
addf not.2 base-thread 

#
# finally connect physical pins to the signals
#net Xstep => parport.0.pin-03-out
#net Xdir  => parport.0.pin-02-out
#net Ystep => parport.0.pin-05-out
#net Ydir  => parport.0.pin-04-out
#net Zstep => parport.0.pin-07-out
#net Zdir  => parport.0.pin-06-out


net Xstep => hal_gpio.pin-36-out
net Xdir => hal_gpio.pin-35-out

net Ystep => hal_gpio.pin-32-out
net Ydir  => not.1.in
net Ydir2 not.1.out => hal_gpio.pin-29-out

net Zstep => hal_gpio.pin-33-out
net Zdir  => hal_gpio.pin-31-out 

net Astep => hal_gpio.pin-37-out
net Adir  => hal_gpio.pin-38-out

setp hal_gpio.pin-07-out 1

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect "spindle on" motion controller pin to a physical pin
#net spindle-on spindle.0.on => parport.0.pin-09-out

###
### You might use something like this to enable chopper drives when machine ON
### the Xen signal is defined in core_stepper.hal
###

# net Xen => parport.0.pin-01-out

# net Xen => hal_gpio.pin-21-out
###
### If you want active low for this pin, invert it like this:
###

# setp parport.0.pin-01-out-invert 1

###
### A sample home switch on the X axis (axis 0).  make a signal,
### link the incoming parport pin to the signal, then link the signal
### to EMC's axis 0 home switch input pin
###

# net Xhome parport.0.pin-10-in => joint.0.home-sw-in

###
### Shared home switches all on one parallel port pin?
### that's ok, hook the same signal to all the axes, but be sure to 
### set HOME_IS_SHARED and HOME_SEQUENCE in the ini file.  See the
### user manual!
###

# net homeswitches <= parport.0.pin-10-in
# net homeswitches => joint.0.home-sw-in
# net homeswitches => joint.1.home-sw-in
# net homeswitches => joint.2.home-sw-in

net xhome hal_gpio.pin-22-in => joint.0.home-sw-in  joint.0.pos-lim-sw-in
#net xhome hal_gpio.pin-22-in => join.0.home-sw-in joint.0.neg-lim-sw-in
net yhome hal_gpio.pin-18-in => joint.1.home-sw-in  joint.1.pos-lim-sw-in
net zhome hal_gpio.pin-15-in => joint.2.home-sw-in  joint.2.pos-lim-sw-in


###
### Sample separate limit switches on the X axis (axis 0)
###

# net X-neg-limit parport.0.pin-11-in => joint.0.neg-lim-sw-in
# net X-pos-limit parport.0.pin-12-in => joint.0.pos-lim-sw-in

###
### Just like the shared home switches example, you can wire together
### limit switches.  Beware if you hit one, EMC will stop but can't tell
### you which switch/axis has faulted.  Use caution when recovering from this.
###

# net Xlimits parport.0.pin-13-in => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in
