/*   This is a component of pluto_servo_rpspi for RaspberryPi , a PWM servo driver and quadrature
 *    counter over SPI for linuxcnc.
 *    Copyright 2013 Matsche <tinker@play-pla.net>
 *                               based on GP Orcullo's picnc driver and
 *				 based on the pluto_servo.comp from Jeff Epler <jepler@unpythonic.net>
 *
 *
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

component pluto_servo_rpspi """Hardware driver and firmware for the Pluto-P parallel-port FPGA, for use with servo machines and RaspberryPi SPI .""";

description """
Pluto_servo is a LinuxCNC software driver and associated firmware that allow the Pluto-P board to be used to control a servo-based CNC machine.
""";

pin out s32 encoder.#.count[4];
pin out float encoder.#.position[4];
pin out float encoder.#.velocity[4];
pin in bit encoder.#.reset[4];
pin io bit encoder.#.index-enable[4]; 
param rw float encoder.#.scale[4] =1.0;

param rw bit encoder.z-polarity "Set to TRUE if the index pulse is active low, FALSE if it is active high.  Affects all encoders.";

pin in float pwm.#.value[4];
pin in bit pwm.#.enable[4] "pwm.\\fIM\\fR corresponds to the pins labeled UP\\fIM\\fR and DN\\fIM\\fR on the pinout diagram";
param rw float pwm.#.offset[4];
param rw float pwm.#.scale[4]=1.0;
param rw float pwm.#.max-dc[4]=1.0;
param rw float pwm.#.min-dc[4]=0;
param rw bit pwm.#.pwmdir[4]=0
"Set to TRUE use PWM+direction mode.  Set to FALSE to use Up/Down mode.";

param rw bit pwm.is-pdm "Set to TRUE to use PDM (also called interleaved PWM) mode.  Set to FALSE to use traditional PWM mode.  Affects all PWM outputs.";

//definitiv nur 18 Ausgaenge
pin in bit dout.##[18];

param rw bit dout.##-invert[18]
"If TRUE, the output on the corresponding \\fBdout.\\fIMM\\fR is inverted.";

pin out bit din.##[20];
pin out bit din.##_not[20];

param rw s32 debug_0;
param rw s32 debug_1 """These parameters can display values which are useful to developers or for debugging the driver and firmware.  They are not useful for integrators or users.""";

see_also """The \\fIpluto_servo\\fR section in the HAL User Manual, which shows the location of each physical pin on the pluto board.""";

option singleton;
option extra_setup;
option extra_cleanup;

option data internal;

function transfer  "transfers data between master and slave devices";
function spitest "test spi transfer (only for developers)";

license "GPL";
author "Matsche";
;;

#include "rtapi.h"
#include "rtapi_bitops.h"
#include "rtapi_app.h"
#include "hal.h"

#if !defined(BUILD_SYS_USER_DSO)
#error "This driver is for usermode threads only"
#endif

#if !defined(TARGET_PLATFORM_RASPBERRY)
#error "This driver is for the Raspberry Pi platform only"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>

#include "pluto_common_rpspi.h"

volatile unsigned *gpio, *spi;
static volatile u32 txBuf[BUFSIZE], rxBuf[BUFSIZE];
static platform_t platform;

static int map_gpio();
static void setup_gpio();
static void restore_gpio();
static int pluto_program(char *);
platform_t check_platform(void);

typedef struct {
    int64_t last_index[4];
    int64_t last_count[4];
    int64_t reset_count[4];
} internal;

#define W 14
#define MASK ((1<<W)-1)

int PWM(int enable, double value, double offset, double scale, double min_dc, double max_dc, int dio0, int dio1, int is_pdm, int is_pwmdir) {
    int result;
    if(enable == 0) return 0;

    value = value / scale + offset;
    if(value < -max_dc) value = -max_dc;
    else if(value > -min_dc && value < 0) value = -min_dc;
    else if(value > 0 && value < min_dc) value = min_dc;
    else if(value > max_dc) value = max_dc;

    value = 2047 * value;
    if(value < -2047) value = -2047;
    if(value > 2047) value = 2047;

    if(value < 0) {
	    if(is_pwmdir) {
            result = (1<<13) | (int)(-value);
	    } else {
            result = (1<<15) | (int)(-value);
	    }
    } else result = value;
    if(is_pdm) result |= 1<<14;
    if(dio0) result ^= 1<<12;
    if(dio1) result ^= 1<<13;

    return result;
}

EXTRA_SETUP() {
	int i, retval = 0;

	platform = check_platform();
	retval = map_gpio();
	if (retval < 0) {
		rtapi_print_msg(RTAPI_MSG_ERR,
		        "HAL_pluto_servo_rpspi: ERROR: cannot map GPIO memory\n");
		return retval;
	}

	if(firmware != "")
	{
		retval = pluto_program(firmware);
		if(retval < 0)
		{
			rtapi_print_msg(RTAPI_MSG_ERR,
					"HAL_pluto_servo_rpspi: ERROR: uploading firmware failed!!!\n");
			return retval;
		}
	}
        
	setup_gpio();

	return 0;
}

EXTRA_CLEANUP() {
	// reset the FPGA
	GPIO_CLR = 1<<25;
	usleep(1000);
	GPIO_SET = 1<<25;
	usleep(1000);

	if (gpio != MAP_FAILED && spi != MAP_FAILED) {
		
		restore_gpio();
		munmap((void *)gpio,BLOCK_SIZE);
		munmap((void *)spi,BLOCK_SIZE);
	}
}

FUNCTION(spitest) {
	char *buf;
	int i;
	__u32 spidata;
	
	for (i=0; i<BUFSIZE; i++) {
		txBuf[i] = i;
	}
	
	/* activate transfer */
	BCM2835_SPICS = SPI_CS_TA|SPI_CS_CPHA;

	/* send txBuf */
	/* RPi SPI transfers 8 bits at a time only */
	buf = (char *)txBuf;
	for (i=0; i<SPIBUFSIZE; i++) {
		BCM2835_SPIFIFO = *buf++;
	}

	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */
	BCM2835_SPICS = SPI_CS_DONE;

	/*****************************************************************************/
	/* read buffer */
	/* RPi SPI transfers 8 bits at a time only */
	buf = (char *)rxBuf;
	for (i=0; i<SPIBUFSIZE; i++) {
		*buf++ = BCM2835_SPIFIFO;
	}
	
	for (i=5; i<BUFSIZE; i++) {
		spidata = rxBuf[i];
	}
}
	
FUNCTION(transfer) {
	char *buf;
	int i;
	__u32 spidata;
	
	/*
	for (i=0; i<BUFSIZE; i++) {
		txBuf[i] = _tx(i);
	}*/
	int r = 0;
	//if(communication_error) return;

	for(i=0; i<4; i++) {
			if(pwm_max_dc(i) > 1) pwm_max_dc(i) = 1;
			else if(pwm_max_dc(i) < 0) pwm_max_dc(i) = 0;
			if(pwm_min_dc(i) < 0) pwm_min_dc(i) = 0;
			else if(pwm_min_dc(i) > pwm_max_dc(i)) pwm_min_dc(i) = pwm_max_dc(i);
	}

#define D(x) (!dout(x) ^ !dout_invert(x))
#define P(x,y) PWM(pwm_enable(x), pwm_value(x), pwm_offset(x), pwm_scale(x), \
			pwm_min_dc(x), pwm_max_dc(x), D(y), D(y+1), pwm_is_pdm, pwm_pwmdir(x))
	//write32( P(0,10) | (P(1, 12) << 16));
	//write32( P(2,14) | (P(3, 16) << 16));
	txBuf[0] = P(0,10) | (P(1, 12) << 16);
	txBuf[1] = P(2,14) | (P(3, 16) << 16);

	for(i=0; i<10; i++) {
			if(!dout(i) ^ !dout_invert(i)) r |= (1<<i);
	}
	if (encoder_z_polarity) r |= 0x8000;
	//if (watchdog) r |= 0x4000;
	//if (test_encoder) r |= 0x2000;
	//write16(r);
	txBuf[2] = r;
	
	for (i=3; i<BUFSIZE; i++) {
		txBuf[i] = i;
	}
	//filltxbuf();
	
	/* activate transfer */
	BCM2835_SPICS = SPI_CS_TA|SPI_CS_CPHA;

	/* send txBuf */
	/* RPi SPI transfers 8 bits at a time only */
	buf = (char *)txBuf;
	for (i=0; i<SPIBUFSIZE; i++) {
		BCM2835_SPIFIFO = *buf++;
	}

	/* wait until transfer is finished */
	while (!(BCM2835_SPICS & SPI_CS_DONE));

	/* clear DONE bit */
	BCM2835_SPICS = SPI_CS_DONE;

	/* read buffer */
	/* RPi SPI transfers 8 bits at a time only */
	buf = (char *)rxBuf;
	for (i=0; i<SPIBUFSIZE; i++) {
		*buf++ = BCM2835_SPIFIFO;
	}
	/*
	for (i=0; i<BUFSIZE; i++) {
		_rx(i) = rxBuf[i];
	}*/
	
	for(i=0; i<4; i++) {
		int64_t count, index;
		int newlow, indlow, indexed;
		int reset;
		spidata = rxBuf[i];
		reset = encoder_reset(i);
		/*
		if(i == 0) {
				int status = inb(ioaddr+1) & 1;
				if(status) {
						communication_error ++;
				pluto_clear_error_register();
				}
				//if(communication_error) { EPP_DIR_WRITE(); return; }
		} */

		newlow = spidata & MASK;
		indlow = (spidata >> W) & MASK;
		indexed = spidata & (1<<(2*W));

		count = extend(data.last_count[i], newlow, W);
		if(indexed)
				index = extend(count, indlow, W);
		else
				index = data.last_index[i];

		if(encoder_index_enable(i) && indexed) {
				encoder_index_enable(i) = 0;
				data.reset_count[i] = index;
		}
		if(reset) encoder_velocity(i) = 0;
		else encoder_velocity(i) = (count - data.last_count[i]) /
				encoder_scale(i) / fperiod;
		data.last_index[i] = index;
		data.last_count[i] = count;
		if(reset) data.reset_count[i] = count;
		encoder_count(i) = count - data.reset_count[i];
		encoder_position(i) = encoder_count(i) / encoder_scale(i);

		if(i == 0) {
				debug_0 = spidata;
				debug_1 = count;
		}
	}

	spidata = rxBuf[4];

	for(i=0; i< 20; i++) {
			int b = spidata & (1<<i);
			din(i) = !!b;
			din_not(i) = !b;
	}
	
	for (i=5; i<BUFSIZE; i++) {
		spidata = rxBuf[i];
	}
	//getrxbuf(period);
}

int map_gpio() {
	int fd;
	static u32 mem_base, mem_spi_base;

	switch (platform) {
	case RPI:
		mem_base = BCM2835_GPIO_BASE;
		mem_spi_base = BCM2835_SPI_BASE;
		break;
	case RPI_2:
		mem_base = BCM2835_GPIO_BASE + BCM2709_OFFSET;
		mem_spi_base = BCM2835_SPI_BASE + BCM2709_OFFSET;
		break;
	}

	fd = open("/dev/mem", O_RDWR | O_SYNC);
	if (fd < 0) {
		rtapi_print_msg(RTAPI_MSG_ERR,"HAL_pluto_servo_rpspi: can't open /dev/mem \n");
		return -1;
	}

	/* mmap GPIO */
	gpio = mmap(
	        NULL,
	        BLOCK_SIZE,
	        PROT_READ|PROT_WRITE,
	        MAP_SHARED,
	        fd,
	        mem_base);

	/* mmap SPI */
	spi = mmap(
	        NULL,
	        BLOCK_SIZE,
	        PROT_READ|PROT_WRITE,
	        MAP_SHARED,
	        fd,
	        mem_spi_base);

	close(fd);

	if (gpio == MAP_FAILED) {
		rtapi_print_msg(RTAPI_MSG_ERR,"HAL_pluto_servo_rpspi: can't map gpio\n");
		return -2;
	}

	if (spi == MAP_FAILED) {
		rtapi_print_msg(RTAPI_MSG_ERR,"HAL_pluto_servo_rpspi: can't map spi\n");
		return -3;
	}

	return 0;
}

void setup_gpio() {
	uint32_t x;

	/* change SPI pins */
	x = BCM2835_GPFSEL0;
	//x &= ~(0b111 << (7*3) | 0b111 << (8*3) | 0b111 << (9*3));
	//x |= (0b001 << (7*3) | 0b100 << (8*3) | 0b100 << (9*3));	// GPIO pin7 output, pin8 pin9 alternate0 (SPI)
	x &= ~(0b111 << (8*3) | 0b111 << (9*3));
	x |= (0b100 << (8*3) | 0b100 << (9*3));	// pin8 pin9 alternate0 (SPI)
	BCM2835_GPFSEL0 = x;

	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (0*3) | 0b111 << (1*3));
	x |= (0b100 << (0*3) | 0b100 << (1*3));	// pin10 pin11 alternate0 (SPI)
	BCM2835_GPFSEL1 = x;

	/* set up SPI */
	BCM2835_SPICLK = (1 << SPICLKDIV);

	BCM2835_SPICS = 0;

	/* clear FIFOs */
	BCM2835_SPICS |= SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX;

	/* clear done bit */
	BCM2835_SPICS |= SPI_CS_DONE;
}

void restore_gpio() {
	uint32_t x;

	/* change SPI pins to inputs*/
	x = BCM2835_GPFSEL0;
	//x &= ~(0b111 << (7*3) | 0b111 << (8*3) | 0b111 << (9*3));
	x &= ~(0b111 << (8*3) | 0b111 << (9*3));
	BCM2835_GPFSEL0 = x;

	x = BCM2835_GPFSEL1;
	x &= ~(0b111 << (0*3) | 0b111 << (1*3));
	BCM2835_GPFSEL1 = x;
}


#define FIRMWARE_SIZE 19895
static int pluto_program(char *firmware) {
	int byte, bit;
	int i;
	FILE *f;
	int size = 0;
	
	f= fopen(firmware, "rb");
	if(!f) {
		rtapi_print_msg(RTAPI_MSG_ERR, "fopen-Error\n");
		return -EIO;
	}
	if(fseek(f, 0, SEEK_END))
	{
		rtapi_print_msg(RTAPI_MSG_ERR, "fseek-Error!\n");
		return -EIO;
	}
	size = ftell(f);
	rewind(f);
	rtapi_print_msg(RTAPI_MSG_INFO, "Filesize: %d Bytes\n", size);
	if(size != FIRMWARE_SIZE)
	{
		rtapi_print_msg(RTAPI_MSG_ERR, "Incorrect filesize!!\n");
		return -EIO;
	}
	unsigned char buf[size];
	if(fread(buf, 1, size, f) != FIRMWARE_SIZE) {
		rtapi_print_msg(RTAPI_MSG_ERR, "fread\n");
		return -EIO;
	}
	
	/***************************/
	/** Just a extra tuition	**/ 
	uint32_t x;
	/* setup GPIO 25 as OUTPUT connected to Data2 on Pluto (internal nRESET) */
	x = BCM2835_GPFSEL2;		// (25/10)
	x &= ~(0b111 << (5*3));	// (25%10*3)
	x |= (0b001 << (5*3));	// pin25 OUTPUT
	BCM2835_GPFSEL2 = x;
	
	/* setup GPIO 24 as INPUT connected to nPaperOut on Pluto */
	x = BCM2835_GPFSEL2;		// (24/10)
	x &= ~(0b111 << (4*3));	// (24%10*3) pin24 INPUT
	BCM2835_GPFSEL2 = x;
	/***************************/
	
	// Set GPIO pins 8-11 to output for Pluto Programming (CE0, MISO, MOSI, SCKL)
	for (i=8; i<=11; i++)
	{
		INP_GPIO(i); // must use INP_GPIO before we can use OUT_GPIO
		OUT_GPIO(i);
	}
	

	// reset the FPGA if it isn't
	GPIO_CLR = 1<<25;
	usleep(1000);
	GPIO_SET = 1<<25;
	usleep(1000);
	
		rtapi_print("uploading pluto-spi-firmware...\n");

	// pull the reset low -- bit 2 of Control register
	// keep it low 2 microseconds
	for(i=0; i<12; i++) GPIO_CLR = 1<<8;	//outb(0, ioaddr+2);

	// let it go high again
	// delay 10 microseconds to guarantee nStatus high
	for(i=0; i<40; i++) GPIO_SET = 1<<8;	//outb(4, ioaddr+2);

	// Now program the device...
	for(byte = 0; byte < FIRMWARE_SIZE; byte++) {
		for(bit = 0; bit < 8; bit++) {
			int v = buf[byte] & (1<<bit);
			if(v) GPIO_SET = 1<<10; else GPIO_CLR = 1<<10;
			for(i=0; i<22; i++) GPIO_CLR = 1<<11;		//outb(0|4, ioaddr+2);
			
			for(i=0; i<22; i++) GPIO_SET = 1<<11;		//outb(1|4, ioaddr+2);
			
			for(i=0; i<22; i++) GPIO_CLR = 1<<11;
		}
	}
	rtapi_print("...done\n");
}

platform_t check_platform(void)
{
	FILE *fp;
	char buf[2048];
	size_t fsize;

	fp = fopen("/proc/cpuinfo", "r");
	fsize = fread(buf, 1, sizeof(buf), fp);
	fclose(fp);
	
	if (fsize == 0 || fsize == sizeof(buf))
		return 0;

	/* NUL terminate the buffer */
	buf[fsize] = '\0';

	if (NULL != strstr(buf, "BCM2708"))
		return RPI;
	else if (NULL != strstr(buf, "BCM2709"))
		return RPI_2;
	else
		return UNSUPPORTED;
}
