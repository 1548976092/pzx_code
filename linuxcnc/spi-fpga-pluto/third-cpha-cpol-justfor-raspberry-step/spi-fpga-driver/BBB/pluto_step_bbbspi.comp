/*   This is a component of pluto_servo_bbbspi for BeagleBoneBlack , a PWM servo driver and quadrature
 *    counter over SPI for linuxcnc.
 *    Copyright 2013 Matsche <tinker@play-pla.net>
 * 			based on GP Orcullo's picnc driver and
 * 			based on the pluto_step.comp from Jeff Epler <jepler@unpythonic.net>
 *
 *
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

component pluto_step_bbbspi """Hardware driver and firmware for the Pluto-P parallel-port FPGA, for use with servo machines and BeagleBoneBlack SPI .""";

description """
Pluto_step is a LinuxCNC software driver and associated firmware that allow the Pluto-P board to be used to control a stepper-based CNC machine.

The driver has 4 step+direction channels, 14 dedicated digital outputs, and 16
dedicated digital inputs.

.SS Step generators
The step generator takes a position input and output.

The step waveform includes step length/space and direction hold/setup time.
Step length and direction setup/hold time is enforced in the FPGA.  Step space
is enforced by a velocity cap in the driver.

\\fI(all the following numbers are subject to change)\\fR
In \\fIspeedrange=0\\fR, the maximum step rate is 312.5kHz.  For position
feedback to be accurate, the maximum step rate is 512 pulses per servo cycle
(so a 1kHz servo cycle does not impose any additional limitation).  The maximum
step rate may be lowered by the step length and space parameters, which are
rounded up to the nearest multiple of 1600ns.

In successive speedranges the maximum step rate is divided in half, as is the
maximum steps per servo cycle, and the minimum nonzero step rate.

.SS Digital I/O
The digital output pins conform to the `canonical digital output' interface
described in the HAL manual.

The digital input pins conform to the `canonical digital input' interface
described in the HAL manual.
""";

pin in float stepgen.#.position-cmd[4];
pin out float stepgen.#.velocity-fb[4];
pin out float stepgen.#.position-fb[4];
pin out s32 stepgen.#.counts[4];
pin in bit stepgen.#.enable[4];
pin in bit stepgen.#.reset[4] "When TRUE, reset position-fb to 0";
param rw float stepgen.#.scale[4] = 1.0;
param rw float stepgen.#.maxvel[4] = 0;
param rw bit stepgen.step_polarity;

param rw u32 stepgen.steplen "Step length in ns.";
param rw u32 stepgen.stepspace "Step space in ns";
param rw u32 stepgen.dirtime "Dir hold/setup in ns.  Refer to the pdf documentation for a diagram of what these timings mean.";

pin in bit dout.##[14]
"""dout.\\fIMM\\fR corresponds to the pin labeled
OUT\\fIM\\fR on the pinout diagram.""";
param rw bit dout.##-invert[14]
"If TRUE, the output on the corresponding \\fBdout.\\fIMM\\fR is inverted.";

pin out bit din.##[16];
pin out bit din.##_not[16]
"""din.\\fIMM\\fR corresponds to the pin labeled
IN\\fIM\\fR on the pinout diagram.""";

param rw u32 communication_error """Incremented each time 
pluto-step.read detects an error code in the EPP status register.  While
this register is nonzero, new values are not being written to the Pluto-P
board, and the status of digital outputs and the PWM duty cycle of the PWM
outputs will remain unchanged.  If the hardware watchdog is enabled, it will
activate shortly after the communication error is detected by LinuxCNC.  To continue
after a communication error, set this parameter back to zero.""";

param rw s32 debug_0;
param rw s32 debug_1;
param rw float debug_2=.5;
param rw float debug_3=2.0
 """Registers that hold debugging information of interest to developers""";

option singleton;
option extra_setup;
option extra_cleanup;

option data internal;

see_also """The \\fIpluto_step\\fR section in the HAL User Manual, which shows the location of each physical pin on the pluto board.""";

function transfer  "transfers data between master and slave devices";

license "GPL";
author "Matsche";
;;

#include "rtapi.h"
#include "rtapi_bitops.h"
#include "rtapi_app.h"
#include "hal.h"

#if !defined(BUILD_SYS_USER_DSO)
#error "This driver is for usermode threads only"
#endif

#if !defined(TARGET_PLATFORM_BEAGLEBONE)
#error "This driver is for the BeagleBoneBlack platform only"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>

#include "pluto_common_bbbspi.h"

static volatile unsigned *gpio, *spi;
static volatile u32 txBuf[BUFSIZE], rxBuf[BUFSIZE];

static int ret = 0;
static int fd;

static volatile struct spi_ioc_transfer tr;
/*
 * {
		.tx_buf = (unsigned long)txBuf,
		.rx_buf = (unsigned long)rxBuf,
		.len = ARRAY_SIZE((char*)txBuf),
		.delay_usecs = delay,
		.speed_hz = speed,
		.bits_per_word = bits,
	};
	*/
	
static int map_gpio();
static void setup_gpio();
static void restore_gpio();
static int pluto_program();

static int speedrange=0;
RTAPI_MP_INT(speedrange, "Speed range 0..3");

#define PLUTO_SPEED_NS (1600)
#define PLUTO_SPEED    (PLUTO_SPEED_NS * 1e-9)
#define PLUTO_FREQ     (1e9 / PLUTO_SPEED_NS)
#define TMAX           ((1<<5)-1)

#define W 10
#define F 11
#define MODULO ((1<<(W+F))-1)
#define MASK ((1<<(W+F))-1)
#define MAXDELTA (MASK/2)

typedef struct {
	int64_t last_count[4];
	int64_t reset_count[4];
	double old_position_cmd[4];
	double old_velocity_cmd[4];
} internal;

#define ONE (1<<F)
#define MAX_STEP_RATE ((1<<F)-1)

static inline int64_t extend(int64_t old, int newlow, int nbits) {
	int64_t mask = (1<<nbits) - 1;
	int64_t maxdelta = mask / 2;
	int64_t oldhigh = old & ~mask;
	int64_t oldlow = old & mask;
	int64_t candidate1, candidate2;

	candidate1 = oldhigh | newlow;
	if(oldlow < newlow) candidate2 = candidate1 - (1<<nbits);
	else                candidate2 = candidate1 + (1<<nbits);

	if (llabs(old-candidate1) > maxdelta)
	{
		return candidate2;
	}else
		return candidate1;
}

EXTRA_SETUP() {
	int i, retval = 0;

	/*
	 * program fpga firmware
	 */
	retval = pluto_program();
	if(retval < 0)
	{
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: uploading firmware failed!!!\n");
		return retval;
	}

	fd = open(device, O_RDWR);
	if (fd < 0){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't open device %s\n", device);
		return fd;
	}
	/*
	 * spi mode
	 */
	mode |= SPI_CPHA;
	retval = ioctl(fd, SPI_IOC_WR_MODE, &mode);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't set spi mode\n");
		return retval;
	}
	retval = ioctl(fd, SPI_IOC_RD_MODE, &mode);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't get spi mode\n");
		return retval;
	}
	/*
	 * bits per word
	 */
	retval = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't set bits per word\n");
		return retval;
	}
	retval = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't get bits per word\n");
		return retval;
	}
	/*
	 * max speed hz
	 */
	retval = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't set max speed hz\n");
		return retval;
	}
	retval = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed);
	if (ret == -1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't get max speed hz\n");
		return retval;
	}
	/*
	rtapi_print("HAL_pluto_step_bbbspi: spi mode: %d\n", mode);
	rtapi_print("HAL_pluto_step_bbbspi: bits per word: %d\n", bits);
	rtapi_print("HAL_pluto_step_bbbspi: max speed: %d Hz (%d KHz)\n", speed, speed/1000);
	*/
	rtapi_print("HAL_pluto_step_bbbspi: spi mode: %d\n", mode);
	rtapi_print("HAL_pluto_step_bbbspi: bits per word: %d\n", bits);
	rtapi_print("HAL_pluto_step_bbbspi: max speed: %d Hz (%d KHz)\n", speed, speed/1000);
	rtapi_print("SPIBUFSIZE: %d; BUFSIZE %d\n", SPIBUFSIZE, BUFSIZE);
	
	
	tr.tx_buf = (unsigned long)txBuf;
	tr.rx_buf = (unsigned long)rxBuf;
	//tr.len = ARRAY_SIZE((char*)txBuf)*4;
	tr.len = SPIBUFSIZE;
	tr.delay_usecs = delay;
	tr.speed_hz = speed;
	tr.bits_per_word = bits;
	
	return 0;
}

EXTRA_CLEANUP() {
	// reset the FPGA
	*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_19_RST);
	usleep(1000);
	*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_19_RST;
}

FUNCTION(transfer) {
	char *buf;
	__u16 * tbuf;
	int i;
	__u32 spidata;
	
	/*************************************************************/
	/* write buffer */
	/*************************************************************/
	int r = 0;
	int stepspace_ticks = stepgen_stepspace/PLUTO_SPEED_NS;
	int steplen_ticks = stepgen_steplen/PLUTO_SPEED_NS;
	int dirtime_ticks = stepgen_dirtime/PLUTO_SPEED_NS;
	int rate, maxrate = MAX_STEP_RATE;
	double fmax;

	if(steplen_ticks > TMAX) {
		steplen_ticks = TMAX;
		rtapi_print("Requested step length %dns decreased to %dns due to hardware limitations\n",
				stepgen_steplen, TMAX * PLUTO_SPEED_NS);
		stepgen_steplen = TMAX * PLUTO_SPEED_NS;
	}

	if(dirtime_ticks > TMAX) {
		dirtime_ticks = TMAX;
		rtapi_print("Requested direction change time %dns decreased to %dns due to hardware limitations\n",
				stepgen_dirtime, TMAX * PLUTO_SPEED_NS);
		stepgen_dirtime = TMAX * PLUTO_SPEED_NS;
	}

	// Speed limits come from several sources
	// First limit: step waveform timings
	fmax = 1.0 / PLUTO_SPEED / (2 + steplen_ticks + stepspace_ticks);
	// Second limit: highest speed command
	if(fmax > PLUTO_FREQ / (2<<speedrange))
			fmax = PLUTO_SPEED * (2<<speedrange);
	// Third limit: max sign-extenable counts per period
	if(fmax > MAXDELTA / fperiod / (1<<speedrange))
			fmax = MAXDELTA / fperiod / (1<<speedrange);

	//if(communication_error) return;
	
	tbuf = (__u16 *)txBuf;
	for(i=0; i<4; i++) {
		double new_position_cmd = stepgen_position_cmd(i);
		double v = new_position_cmd - data.old_position_cmd[i];
		double est_err = stepgen_position_fb(i) + data.old_velocity_cmd[i] * fperiod - new_position_cmd;
		double actual_max;
		double scale_abs = abs(stepgen_scale(i));

		v = v - debug_2 * est_err / fperiod;
		if(v > 0) v = v + .5/scale_abs;
		else if(v < 0) v = v - .5/scale_abs;

		data.old_position_cmd[i] = new_position_cmd;
		data.old_velocity_cmd[i] = v;
		actual_max = fmax / scale_abs;
		if(stepgen_maxvel(i) < 0) stepgen_maxvel(i) = -stepgen_maxvel(i);
		if(stepgen_maxvel(i) != 0 && stepgen_maxvel(i) > actual_max) {
			static int message_printed[4] = {0,0,0,0};
			if(!message_printed[i]) {
				rtapi_print("Requested step rate %dHz decreased to %dHz due to hardware or timing limitations\n",
						(int)(stepgen_maxvel(i) * scale_abs),
						(int)(fmax));
				message_printed[i] = 1;
			}
			stepgen_maxvel(i) = actual_max;
		}

		if(stepgen_maxvel(i) == 0) {
			if(v < -actual_max) v = -actual_max;
			if(v > actual_max) v = actual_max;
		}else {
			if(v < -stepgen_maxvel(i)) v = -stepgen_maxvel(i);
			if(v > stepgen_maxvel(i)) v = stepgen_maxvel(i);
		}
		rate = v*stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange);

		if(rate > maxrate) rate = maxrate;
		if(rate < -maxrate) rate = -maxrate;

		if(!stepgen_enable(i)) rate = 0;
		//if(i == 0) debug_1 = rate;
		
		tbuf[i] = rate;
	}

	r = 0;
	for(i=0; i<14; i++) {
		if(!dout(i) ^ !dout_invert(i)) r |= (1<<i);
	}
	txBuf[2] = r;
	r = steplen_ticks | (dirtime_ticks << 8);
	//r = steplen_ticks+stepspace_ticks | (dirtime_ticks << 8);
	if (stepgen_step_polarity) {
		r |= 0x8000;
	}else r &= 0x7FFF;
	txBuf[2] |= r<<16;
	
	for (i=3; i<BUFSIZE; i++) {
		txBuf[i] = i;
	}
	
	/* send buffer */
	r = ioctl(fd, SPI_IOC_MESSAGE(1), &tr);
	if (r < 1){
		rtapi_print("HAL_pluto_step_bbbspi: ERROR: can't send spi message\n");
	}
	/*************************************************************/
	/* read buffer */
	/*************************************************************/
	for(i=0; i<4; i++) {
		int64_t count;
		double fcount;
		int newlow;
		int reset;
		spidata = rxBuf[i];
		
		newlow = spidata & MASK;
		count = extend(data.last_count[i], newlow, W+F);
		stepgen_velocity_fb(i) = (count-data.last_count[i])/stepgen_scale(i)/fperiod/(1<<F);
		data.last_count[i] = count;
		if(reset) data.reset_count[i] = count;
		fcount = (count-data.reset_count[i])*1.0/(1<<F);
		stepgen_counts(i) = fcount;
		stepgen_position_fb(i) = fcount/stepgen_scale(i);


		if(i == 0) {
		//		debug_0 = spidata;
			debug_0 = fcount;
			debug_1 = newlow;
		}
	}

	spidata = rxBuf[4];
	//debug_0 = spidata; //din
	//debug_1 = spidata;

	for(i=0; i< 16; i++) {
		int b = spidata & (1<<i);
		din(i) = !!b;
		din_not(i) = !b;
	}
	
	for (i=5; i<BUFSIZE; i++) {
		spidata = rxBuf[i];
	}
}


#define FIRMWARE_SIZE 19895
static int pluto_program() {
	int byte, bit;
	int i;
	FILE *f;
	int size = 0;
	rtapi_print("loading pluto-spi-bbb-stepper.rbf...\n");
	f= fopen("/home/linuxcnc/linuxcnc/src/hal/drivers/pluto_spi_stepper_firmware/pluto_spi_bbb_stepper.rbf", "rb");
	if(!f) {
		rtapi_print( "fopen-Error\n");
		return -EIO;
	}
	if(fseek(f, 0, SEEK_END))
	{
		rtapi_print( "fseek-Error!\n");
		return -EIO;
	}
	size = ftell(f);
	rewind(f);
	rtapi_print( "Filesize: %d Bytes\n", size);
	if(size != FIRMWARE_SIZE)
	{
		rtapi_print( "Incorrect filesize!!\n");
		return -EIO;
	}
	unsigned char buf[size];
	if(fread(buf, 1, size, f) != FIRMWARE_SIZE) {
		rtapi_print("fread-Error!\n");
		return -EIO;
	}
	
	gpio_setup();
	/*
	// reset the FPGA in advance
	*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_19_RST);
	usleep(1000);
	*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_19_RST;
	*/
	
	rtapi_print("uploading pluto-spi-firmware...\n");

	// pull the reset low -- bit 2 of Control register
	// keep it low 2 microseconds
	for(i=0; i<12; i++) *(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_19_RST);		//outb(0, ioaddr+2);

	*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_18_CLK;
	
	// let it go high again
	// delay 10 microseconds to guarantee nStatus high
	for(i=0; i<40; i++) *(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_19_RST;	//outb(4, ioaddr+2);

	// Now program the device...
	for(byte = 0; byte < FIRMWARE_SIZE; byte++) {
		for(bit = 0; bit < 8; bit++) {
			int v = buf[byte] & (1<<bit);
			if(v){ 
				*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_16_DATA0; 
			}
			else { 
				*(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_16_DATA0);
			}
			for(i=0; i<22; i++) *(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_18_CLK);		//outb(0|4, ioaddr+2);
			
			for(i=0; i<22; i++) *(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) | GPIO1_18_CLK;		//outb(1|4, ioaddr+2);
			
			for(i=0; i<22; i++) *(gpio1base + GPIO_DATAOUT/4) = *(gpio1base + GPIO_DATAOUT/4) & (~GPIO1_18_CLK);
		}
	}
	
	rtapi_print("...done\n");
}
